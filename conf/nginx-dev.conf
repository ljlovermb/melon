worker_processes auto;

error_log  logs/error.log info;
pid /data/logs/melon/melon.pid;

events {
    worker_connections 256;
}

env MELOG_PATH;

http {
    resolver 114.114.114.114;
    charset UTF-8;
    include ./mime.types;

    log_format  main '$remote_addr - $remote_user [$time_local] "$request" '
        '$status $body_bytes_sent "$http_referer" '
        '"$http_user_agent" "$request_time" "$ssl_protocol" "$ssl_cipher" "$http_x_forwarded_for"'
        '"$upstream_addr" "$upstream_status" "$upstream_response_length" "$upstream_response_time"';

    access_log  /data/logs/melon/access.log main;
    error_log /data/logs/melon/error.log error;

    sendfile        on;
    keepalive_timeout  65;

    lua_package_path "$prefix/?.lua;./?.lua;/usr/local/lor/?.lua;/usr/local/openresty/lualib/?.lua;;";
    lua_package_cpath "$prefix/melon/?.so;/usr/local/openresty/lualib/?.so;;";
    lua_code_cache off;

    lua_shared_dict service_nodes 10m;
    lua_shared_dict melon_apis 10m;


    init_by_lua_file "./melon/init/init.lua";
    init_worker_by_lua_block{
        local melon = context.instance
        melon.init_worker()
    }

    server {
        listen 80;

        access_log /data/logs/melon/apis.access.log main;
        error_log /data/logs/melon/apis.error.log error;

        set $template_root '';

        location /static {
            alias ./app/static; #app/static;
        }

        #location / {
        #    #content_by_lua_file ./app/main.lua;
        #    content_by_lua_block {
        #        ngx.say("ok")
        #    }
        #}

        location /gateway.htm {
            set $upstream_host $host;

            rewrite_by_lua_block {
                local melon = context.instance
                melon.redirect()
                melon.rewrite()
            }

            access_by_lua_block {
                local melon = context.instance
                melon.init_cookies()
                melon.access()
            }

            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Scheme $scheme;
            proxy_set_header Host $upstream_host;

            header_filter_by_lua_block {
                local melon = context.instance
                melon.header_filter()
            }

            body_filter_by_lua_block {
                local melon = context.instance
                melon.body_filter()
            }

            log_by_lua_block {
                local melon = context.instance
                melon.log()
            }
        }

        location /default-upstream {
            internal;
            set_by_lua_block $upstream {
                return ngx.ctx.dyups
            }
            set_by_lua_block $rewrite_uri {
                return ngx.ctx.rewrite_uri
            }
        }
    }

    server {
        listen 18686;
        access_log /data/logs/melon/ups.access.log main;
        error_log /data/logs/melon/ups.error.log error;

        location /{
            allow 127.0.0.1;
            deny all;
            dyups_interface;
        }
    }

    server {
        listen 18989;
        access_log /data/logs/melon/dashboard.access.log main;
        error_log /data/logs/melon/dashboard.error.log error;
    }

    server {
        listen 18383;
        access_log /data/logs/melon/test.access.log main;
        error_log /data/logs/melon/test.error.log error;

        location /mysql-test {
            rewrite_by_lua_file "./melon/mysql/test.lua";
        }
    }
}